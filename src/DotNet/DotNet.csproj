<Project Sdk="Microsoft.Build.NoTargets">
  <PropertyGroup>
    <TargetFramework>netstandard2.0</TargetFramework>
    <IsPackable>false</IsPackable>
    <MauiOutputPath>$([System.IO.Path]::GetFullPath('$(MSBuildThisFileDirectory)../../bin/'))</MauiOutputPath>
    <DotNetDirectory>$(MauiOutputPath)dotnet/</DotNetDirectory>
    <DotNetToolPath>$(DotNetDirectory)dotnet</DotNetToolPath>
    <DotNetPacksDirectory>$(DotNetDirectory)packs/</DotNetPacksDirectory>
    <DotNetSdkManifestsDirectory>$(DotNetDirectory)sdk-manifests/$(MicrosoftDotnetSdkInternalPackageVersion.Split('-')[0])/</DotNetSdkManifestsDirectory>
    <DotNetSentinelPath>$(DotNetDirectory)sdk/$(MicrosoftDotnetSdkInternalPackageVersion)/EnableWorkloadResolver.sentinel</DotNetSentinelPath>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('windows'))">
    <DotNetInstallScriptUrl>https://dot.net/v1/dotnet-install.ps1</DotNetInstallScriptUrl>
    <DotNetInstallScriptName>dotnet-install.ps1</DotNetInstallScriptName>
    <DotNetInstallScriptPath>$(MauiOutputPath)$(DotNetInstallScriptName)</DotNetInstallScriptPath>
    <DotNetInstallCommand>&amp; '$(DotNetInstallScriptPath)' -Version $(MicrosoftDotnetSdkInternalPackageVersion) -InstallDir '$(DotNetDirectory)' -Verbose</DotNetInstallCommand>
    <DotNetInstallCommand>powershell -Command &quot;$(DotNetInstallCommand)&quot;</DotNetInstallCommand>
  </PropertyGroup>
  <PropertyGroup Condition="$([MSBuild]::IsOSPlatform('osx'))">
    <DotNetInstallScriptUrl>https://dot.net/v1/dotnet-install.sh</DotNetInstallScriptUrl>
    <DotNetInstallScriptName>dotnet-install.sh</DotNetInstallScriptName>
    <DotNetInstallScriptPath>$(MauiOutputPath)$(DotNetInstallScriptName)</DotNetInstallScriptPath>
    <DotNetInstallCommand>sh '$(DotNetInstallScriptPath)' --version $(MicrosoftDotnetSdkInternalPackageVersion) --install-dir '$(DotNetDirectory)' --verbose</DotNetInstallCommand>
  </PropertyGroup>

  <PropertyGroup>
    <_ProvisionDependsOn>
      _DownloadDotNetInstallScript;
      _InstallDotNet;
      _AcquireWorkloads;
      _AcquirePacks;
      _CreateWorkloadSentinel;
    </_ProvisionDependsOn>
  </PropertyGroup>
  <Target Name="_Provision" BeforeTargets="Build" DependsOnTargets="$(_ProvisionDependsOn)" />

  <PropertyGroup>
    <!-- These files should invalidate ./bin/dotnet completely -->
    <_Inputs>
      $(MSBuildThisFile);
      ../../eng/Versions.props;
    </_Inputs>
  </PropertyGroup>

  <Target Name="_DownloadDotNetInstallScript"
      Inputs="$(_Inputs)"
      Outputs="$(DotNetInstallScriptPath)">
    <DownloadFile
        SourceUrl="$(DotNetInstallScriptUrl)"
        DestinationFolder="$(MauiOutputPath)"
        DestinationFileName="$(DotNetInstallScriptName)"
    />
  </Target>

  <Target Name="_InstallDotNet"
      Inputs="$(_Inputs)"
      Outputs="$(DotNetDirectory).stamp">
    <RemoveDir Directories="$(DotNetDirectory)" />
    <Exec Command="$(DotNetInstallCommand)" />
    <Touch Files="$(DotNetDirectory).stamp" AlwaysCreate="true" />
  </Target>

  <ItemGroup>
    <!-- These are extra packs that get extracted that should be deleted -->
    <_PacksToRemove Include="microsoft.build.notargets" />
    <_PacksToRemove Include="microsoft.netcore.platforms" />
    <_PacksToRemove Include="netstandard.library" />
  </ItemGroup>

  <Target Name="_AcquireWorkloads"
      Inputs="$(_Inputs);Dependencies/Workloads.csproj"
      Outputs="$(DotNetSdkManifestsDirectory).stamp">
    <Exec
        Command="&quot;$(DotNetToolPath)&quot; restore &quot;$(MSBuildThisFileDirectory)Dependencies/Workloads.csproj&quot; -bl:$(PackageOutputPath)/DotNetWorkloads.binlog"
        EnvironmentVariables="NUGET_PACKAGES=$(DotNetSdkManifestsDirectory);DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1"
    />
    <!--
      NOTE: Workloads need to go in dotnet/sdk-manifests/6.0.100/Microsoft.Workload.NET.*/
      Workloads only contain two files: data/WorkloadManifest.targets & data/WorkloadManifest.json
      We have to move everything up two directories, for things to land in the right location.
    -->
    <ItemGroup>
      <_WorkloadFiles Include="$(DotNetSdkManifestsDirectory)Microsoft.NET.Workload.*/*/data/WorkloadManifest.*" />
      <_WorkloadDirectoriesToDelete Include="@(_WorkloadFiles->'%(RootDir)%(Directory)'->Distinct())" />
    </ItemGroup>
    <Copy SourceFiles="@(_WorkloadFiles)" DestinationFiles="@(_WorkloadFiles->'%(RootDir)%(Directory)../../%(FileName)%(Extension)')" />
    <RemoveDir Directories="@(_WorkloadDirectoriesToDelete);@(_PacksToRemove->'$(DotNetSdkManifestsDirectory)%(Identity)')" />
    <Touch Files="$(DotNetSdkManifestsDirectory).stamp" AlwaysCreate="true" />
  </Target>

  <Target Name="_AcquirePacks"
      Inputs="$(_Inputs);Dependencies/Packs.csproj"
      Outputs="$(DotNetPacksDirectory).stamp">
    <Exec
        Command="&quot;$(DotNetToolPath)&quot; restore &quot;$(MSBuildThisFileDirectory)Dependencies/Packs.csproj&quot; -bl:$(PackageOutputPath)/DotNetPacks.binlog"
        EnvironmentVariables="NUGET_PACKAGES=$(DotNetPacksDirectory);DOTNET_SKIP_FIRST_TIME_EXPERIENCE=1"
    />
    <RemoveDir Directories="@(_PacksToRemove->'$(DotNetPacksDirectory)%(Identity)')" />
    <Touch Files="$(DotNetPacksDirectory).stamp" AlwaysCreate="true" />
  </Target>

  <Target Name="_CreateWorkloadSentinel"
      Inputs="$(_Inputs)"
      Outputs="$(DotNetSentinelPath)">
    <Touch Files="$(DotNetSentinelPath)" AlwaysCreate="true" />
  </Target>

</Project>